generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum status_enum {
  active
  inactive
}

enum gallery_status_enum {
  active
  inactive
}

enum project_status_enum {
  ongoing
  pending
  terminated
}

model User {
  id         Int       @id @default(autoincrement())
  imagePath  String?
  name       String
  email      String    @unique
  password   String
  status     status_enum @default(active)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  roles      UserRole[]
  sliders    Slider[]   @relation("SliderCreatedBy")
  galleries  Gallery[]  @relation("GalleryCreatedBy")
  services   Service[]  @relation("ServiceCreatedBy")
  projects   Project[]  @relation("ProjectCreatedBy")
  managements Management[] @relation("ManagementCreatedBy")
  languages  Language[] @relation("LanguageCreatedBy")
}

model Slider {
  id         Int         @id @default(autoincrement())
  imagePath  String
  tagline    String?     
  title      String?     
  subtitle   String?     
  status     status_enum @default(active)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  createdBy  Int
  user       User        @relation("SliderCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
}

model Gallery {
  id          Int                  @id @default(autoincrement())
  imagePath   String
  tagline     String?
  title       String?
  subtitle    String?
  status      gallery_status_enum  @default(active)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  createdBy   Int
  user        User @relation("GalleryCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
}

model Service {
  id         Int       @id @default(autoincrement())
  imagePath  String
  name       String
  description String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  Int
  user       User      @relation("ServiceCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
}

model Project {
  id         Int       @id @default(autoincrement())
  imagePath  String
  name       String
  location   String
  description String
  status     project_status_enum @default(ongoing)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  Int
  user       User      @relation("ProjectCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
}

model Management {
  id         Int       @id @default(autoincrement())
  imagePath  String
  name       String
  position   String
  status     status_enum @default(active)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  Int
  user       User      @relation("ManagementCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
}

model Language {
  id         Int       @id @default(autoincrement())
  imagePath  String
  code       String
  language   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  Int
  user       User      @relation("LanguageCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
}

model Role {
  id          Int       @id @default(autoincrement())
  role        String    @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          Int       @id @default(autoincrement())
  permission  String    @unique
  description String?
  roles       RolePermission[]
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([roleId])
  @@unique([userId, roleId])
}

model RolePermission {
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  @@id([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}