generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum status_enum {
  active
  inactive
}

enum gallery_status_enum {
  active
  inactive
}

enum project_status_enum {
  ongoing
  pending
  terminated
}

model User {
  id         Int       @id @default(autoincrement())
  imagePath  String?
  name       String
  email      String    @unique
  password   String
  status     status_enum @default(active)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  roles      UserRole[]
  sliders    Slider[]   @relation("SliderCreatedBy")
  galleries  Gallery[]  @relation("GalleryCreatedBy")
  services   Service[]  @relation("ServiceCreatedBy")
  projects   Project[]  @relation("ProjectCreatedBy")
  managements Management[] @relation("ManagementCreatedBy")
  languages  Language[] @relation("LanguageCreatedBy")
  offices    Office[]   @relation("OfficeCreatedBy")
  contacts    Contact[]   @relation("ContactCreatedBy")
  backups    Backup[]   @relation("BackupCreatedBy")
  cacheLogs  CacheLog[] @relation("CacheLogClearedBy")
  restoreLogs RestoreLog[] @relation("RestoreLogRestoredBy")
}

model Slider {
  id         Int         @id @default(autoincrement())
  imagePath  String
  tagline    String?     
  title      String?     
  subtitle   String?     
  status     status_enum @default(active)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  createdBy  Int
  user       User        @relation("SliderCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
}

model Gallery {
  id          Int                  @id @default(autoincrement())
  imagePath   String
  description String?
  status      gallery_status_enum  @default(active)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  createdBy   Int
  user        User @relation("GalleryCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
}

model Service {
  id         Int       @id @default(autoincrement())
  imagePath  String
  name       String
  description String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  Int
  user       User      @relation("ServiceCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
}

model Project {
  id         Int       @id @default(autoincrement())
  imagePath  String
  name       String
  location   String
  description String
  startDate  DateTime?
  endDate    DateTime?
  status     project_status_enum @default(ongoing)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  Int
  user       User      @relation("ProjectCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
}

model Management {
  id         Int       @id @default(autoincrement())
  imagePath  String
  name       String
  position   String
  status     status_enum @default(active)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  Int
  user       User      @relation("ManagementCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
}

model Language {
  id         Int       @id @default(autoincrement())
  imagePath  String
  code       String
  language   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  Int
  user       User      @relation("LanguageCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
}

model Role {
  id          Int       @id @default(autoincrement())
  role        String    @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          Int       @id @default(autoincrement())
  permission  String    @unique
  description String?
  roles       RolePermission[]
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([roleId])
  @@unique([userId, roleId])
}

model RolePermission {
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  @@id([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model Office {
  id         Int       @id @default(autoincrement())
  name       String    // Nama kantor (e.g., Head Office, Branch Office)
  address    String    // Alamat kantor
  phone      String?   // Nomor telepon kantor
  email      String?   // Email kantor
  status     status_enum @default(active)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  Int
  user       User      @relation("OfficeCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
  contacts   Contact[] // Relasi one-to-many dengan Contact
}

model Contact {
  id         Int       @id @default(autoincrement())
  officeId   Int       // Foreign key ke Office
  name       String    // Nama kontak
  position   String    // Posisi (e.g., Head Administrator)
  email      String?   // Email kontak
  whatsapp   String?   // Nomor WhatsApp
  status     status_enum @default(active)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  Int
  user       User      @relation("ContactCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
  office     Office    @relation(fields: [officeId], references: [id], onDelete: Cascade)
  @@index([officeId])
}

model Message {
  id         Int       @id @default(autoincrement())
  name       String    // Nama pengirim
  email      String    // Email pengirim
  phone      String?   // Nomor telepon pengirim
  subject    String    // Subjek pesan
  message    String    // Isi pesan
  isRead     Boolean   @default(false) // Status sudah dibaca atau belum
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Backup {
  id          Int       @id @default(autoincrement())
  filename    String    // Nama file backup
  backupType  String    // full, partial, selective
  tables      Json      @default("[]") // Array of table names for partial/selective backup
  includeData Boolean   @default(true) // Include data in backup
  includeSchema Boolean  @default(true) // Include schema in backup
  description String?   // Deskripsi backup
  fileSize    Int       // Ukuran file dalam bytes
  status      String    @default("completed") // completed, failed, in_progress
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   Int
  user        User      @relation("BackupCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
  restoreLogs RestoreLog[]
}

model CacheLog {
  id           Int       @id @default(autoincrement())
  cacheType    String    // all, database, session, file, memory, redis
  clearedItems Json      @default("[]") // Array of cleared items
  totalCleared Int       @default(0) // Total number of items cleared
  description  String?   // Deskripsi aktivitas clear cache
  createdAt    DateTime  @default(now())
  clearedBy    Int
  user         User      @relation("CacheLogClearedBy", fields: [clearedBy], references: [id], onDelete: Cascade)
}

model RestoreLog {
  id            Int       @id @default(autoincrement())
  backupId      Int       // Foreign key ke Backup
  status        String    @default("in_progress") // in_progress, completed, failed
  errorMessage  String?   // Pesan error jika restore gagal
  description   String?   // Deskripsi restore
  createdAt     DateTime  @default(now())
  completedAt   DateTime? // Waktu selesai restore
  restoredBy    Int
  user          User      @relation("RestoreLogRestoredBy", fields: [restoredBy], references: [id], onDelete: Cascade)
  backup        Backup    @relation(fields: [backupId], references: [id], onDelete: Cascade)
}
